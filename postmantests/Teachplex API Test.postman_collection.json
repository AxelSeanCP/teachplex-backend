{
	"info": {
		"_postman_id": "b2767819-b871-4cc8-91c5-5b29daff3bd7",
		"name": "Teachplex API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31486336"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Add User with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badUserPayloads = pm.environment.get('badUserPayloads');\r",
									" \r",
									"    if(badUserPayloads && badUserPayloads.length > 0) {\r",
									"        pm.execution.setNextRequest(\"Add User with Invalid Payload\");\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badUserPayloads = pm.environment.get('badUserPayloads');\r",
									"\r",
									"if (!badUserPayloads | badUserPayloads.length === 0) {\r",
									"    badUserPayloads = [\r",
									"        {},\r",
									"        { name: 1 },\r",
									"        { name: 'axel' },\r",
									"        { name: 'axel', password: true },\r",
									"        { name: 'axel', password: 'secret' },\r",
									"        { name: 'axel', password: 'secret', email: 0 },\r",
									"    ];\r",
									"}\r",
									"\r",
									"const currentBadUserPayload = badUserPayloads.shift();\r",
									"console.log(currentBadUserPayload);\r",
									"pm.environment.set('currentBadUserPayload', JSON.stringify(currentBadUserPayload));\r",
									"pm.environment.set('badUserPayloads', badUserPayloads);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadUserPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/users",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.userId).to.be.a('string');\r",
									"\r",
									"    pm.environment.set(\"userId\", responseJson.data.userId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Axel\",\r\n    \"email\": \"axel@gmail.com\",\r\n    \"password\": \"axel1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/users",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add User with Taken Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"Axel\",\r\n    \"password\": \"secret\",\r\n    \"email\": \"bedaemail@gmail.com\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/users",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a User with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const userId = pm.environment.get(\"userId\");\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.user).to.be.an('object');\r",
									"    pm.expect(responseJson.data.user.id).to.equal(userId);\r",
									"    pm.expect(responseJson.data.user.name).to.equal(\"Axel\");\r",
									"    pm.expect(responseJson.data.user.email).to.equal(\"axel@gmail.com\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/users/{{userId}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a User with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/users/xxx",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"users",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.users).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/users",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentications",
			"item": [
				{
					"name": "[No test] Prerequisite",
					"item": [
						{
							"name": "Add User John",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { userId } } = pm.response.json();\r",
											"pm.environment.set(\"johnId\", userId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"john\",\r\n    \"password\": \"secret\",\r\n    \"email\": \"john@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/users",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add User Jane",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { userId } } = pm.response.json();\r",
											"pm.environment.set(\"janeId\", userId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"jane\",\r\n    \"password\": \"secret\",\r\n    \"email\": \"jane@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/users",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Login with Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badLoginPayloads = pm.environment.get('badLoginPayloads');\r",
									"\r",
									"if (!badLoginPayloads | badLoginPayloads.length === 0) {\r",
									"    badLoginPayloads = [\r",
									"        {},\r",
									"        { email: true },\r",
									"        { email: 'axel@gmail.com' },\r",
									"        { email: 'axel@gmail.com', password: true }\r",
									"    ];\r",
									"}\r",
									"\r",
									"const currentBadLoginPayload = badLoginPayloads.shift();\r",
									"pm.environment.set('currentBadLoginPayload', JSON.stringify(currentBadLoginPayload));\r",
									"pm.environment.set('badLoginPayloads', badLoginPayloads);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badLoginPayloads = pm.environment.get('badLoginPayloads');\r",
									" \r",
									"    if(badLoginPayloads && badLoginPayloads.length > 0) {\r",
									"        pm.execution.setNextRequest('Login with Invalid Payload');\r",
									"    }\r",
									"}\r",
									" \r",
									"repeatRequestUntilDatasetEmpty();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadLoginPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Not Found User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"xxx@gmail.com\",\r\n    \"password\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Invalid Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"john@gmail.com\",\r\n    \"password\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with User John",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
									"    pm.expect(responseJson.data.refreshToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('accessTokenJohn', responseJson.data.accessToken);\r",
									"    pm.environment.set('refreshTokenJohn', responseJson.data.refreshToken);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"john@gmail.com\",\r\n    \"password\": \"secret\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with User Jane",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
									"    pm.expect(responseJson.data.refreshToken).to.be.a('string');\r",
									"    \r",
									"    pm.environment.set('accessTokenJane', responseJson.data.accessToken);\r",
									"    pm.environment.set('refreshTokenJane', responseJson.data.refreshToken);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"jane@gmail.com\",\r\n    \"password\": \"secret\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Authentication with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Authentication with Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"xxxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Authentication with John Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{accessTokenJohn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Authentication John Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.accessToken).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenJohn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Authentication with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Authentication with Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"xxx\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Authentication John Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenJohn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Authentication Jane Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenJane}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh Authentication with Deleted Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"refreshToken\": \"{{refreshTokenJohn}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/authentications",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"authentications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Courses",
			"item": [
				{
					"name": "[No Test] Prerequisite",
					"item": [
						{
							"name": "Login with User Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { accessToken } } = pm.response.json();\r",
											"pm.environment.set('accessTokenAdmin', accessToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@gmail.com\",\r\n    \"password\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/authentications",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"authentications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add Course without Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Belajar JavaScript\",\r\n    \"description\": \"Kursus untuk belajar javascrip bagi pemula\",\r\n    \"duration\": \"10 hours\",\r\n    \"level\": \"beginner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/courses",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Course without Admin Privileges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Belajar JavaScript\",\r\n    \"description\": \"Kursus untuk belajar javascrip bagi pemula\",\r\n    \"duration\": \"10 hours\",\r\n    \"level\": \"beginner\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/courses",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Add Course with Invalid Thumbnail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Belajar JavaScript",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Kursus untuk belajar javascript bagi pemula",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "10 hours",
									"type": "text"
								},
								{
									"key": "level",
									"value": "beginner",
									"type": "text"
								},
								{
									"key": "thumbnail",
									"type": "file",
									"src": "meltryllis.txt"
								}
							]
						},
						"url": {
							"raw": "{{weburl}}/api/courses",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Add Course with Valid Uncomplete Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.courseId).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Belajar JavaScript",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Kursus untuk belajar javascript bagi pemula",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "10 hours",
									"type": "text"
								},
								{
									"key": "level",
									"value": "beginner",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{weburl}}/api/courses",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Add Course with Valid Complete Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.courseId).to.be.a('string');\r",
									"\r",
									"    pm.environment.set(\"courseId\", responseJson.data.courseId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Belajar Laravel",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Kursus untuk belajar membuat website menggunakan laravel untuk pemula",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "12 hours",
									"type": "text"
								},
								{
									"key": "level",
									"value": "beginner",
									"type": "text"
								},
								{
									"key": "long_description",
									"value": "Laravel sering digunakan dalam dunia industri khususnya pengembangan website oleh karena itu mempelajari laravel merupakan salah satu investasi yang baik untuk diri sendiri.",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami routes",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami controller",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami views",
									"type": "text"
								},
								{
									"key": "thumbnail",
									"type": "file",
									"src": "picture-small.jpg"
								}
							]
						},
						"url": {
							"raw": "{{weburl}}/api/courses",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Add Course with Taken Course Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "Belajar Laravel",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Kursus untuk belajar membuat website menggunakan laravel untuk pemula",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "12 hours",
									"type": "text"
								},
								{
									"key": "level",
									"value": "beginner",
									"type": "text"
								},
								{
									"key": "long_description",
									"value": "Laravel sering digunakan dalam dunia industri khususnya pengembangan website oleh karena itu mempelajari laravel merupakan salah satu investasi yang baik untuk diri sendiri.",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami routes",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami controller",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami views",
									"type": "text"
								},
								{
									"key": "thumbnail",
									"type": "file",
									"src": "picture-small.jpg"
								}
							]
						},
						"url": {
							"raw": "{{weburl}}/api/courses",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.courses).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Course with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const courseId = pm.environment.get(\"courseId\");\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.course).to.be.an('object');\r",
									"    pm.expect(responseJson.data.course.id).to.equal(courseId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Course with Invalid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/xxx",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Edit Course with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "_method",
									"value": "PUT",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Belajar Laravel untuk Pemula",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Kursus untuk belajar membuat website menggunakan laravel untuk pemula",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "11 hours",
									"type": "text"
								},
								{
									"key": "level",
									"value": "beginner",
									"type": "text"
								},
								{
									"key": "long_description",
									"value": "Laravel sering digunakan dalam dunia industri khususnya pengembangan website oleh karena itu mempelajari laravel merupakan salah satu investasi yang baik untuk diri sendiri.",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami controller",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami routes",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami database",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{weburl}}/api/courses/xxx",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Edit Course with Invalid Thumbnail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "_method",
									"value": "PUT",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Belajar Laravel untuk Pemula",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Kursus untuk belajar membuat website menggunakan laravel untuk pemula",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "11 hours",
									"type": "text"
								},
								{
									"key": "level",
									"value": "beginner",
									"type": "text"
								},
								{
									"key": "long_description",
									"value": "Laravel sering digunakan dalam dunia industri khususnya pengembangan website oleh karena itu mempelajari laravel merupakan salah satu investasi yang baik untuk diri sendiri.",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami controller",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami routes",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami database",
									"type": "text"
								},
								{
									"key": "thumbnail",
									"type": "file",
									"src": "text-small.txt"
								}
							]
						},
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Edit Course with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail course', () => {\r",
									"    const courseId = pm.environment.get('courseId');\r",
									"    pm.sendRequest(`http://teachplex-backend.test/api/courses/${courseId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with revised content', () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"\r",
									"                const responseJson = response.json();\r",
									"\r",
									"                pm.expect(responseJson.status).to.equal('success');\r",
									"                pm.expect(responseJson.data.course).to.be.an('object');\r",
									"                pm.expect(responseJson.data.course.id).to.equal(courseId);\r",
									"                pm.expect(responseJson.data.course.title).to.equal('Belajar Laravel untuk Pemula');\r",
									"                pm.expect(responseJson.data.course.duration).to.equal(\"11 hours\");\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "_method",
									"value": "PUT",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Belajar Laravel untuk Pemula",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Kursus untuk belajar membuat website menggunakan laravel untuk pemula",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "11 hours",
									"type": "text"
								},
								{
									"key": "level",
									"value": "beginner",
									"type": "text"
								},
								{
									"key": "long_description",
									"value": "Laravel sering digunakan dalam dunia industri khususnya pengembangan website oleh karena itu mempelajari laravel merupakan salah satu investasi yang baik untuk diri sendiri.",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami controller",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami routes",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami database",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Edit Course with New Thumbnail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body should have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail course', () => {\r",
									"    const courseId = pm.environment.get('courseId');\r",
									"    pm.sendRequest(`http://teachplex-backend.test/api/courses/${courseId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with revised content', () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"\r",
									"                const responseJson = response.json();\r",
									"\r",
									"                pm.expect(responseJson.status).to.equal('success');\r",
									"                pm.expect(responseJson.data.course).to.be.an('object');\r",
									"                pm.expect(responseJson.data.course.id).to.equal(courseId);\r",
									"                pm.expect(responseJson.data.course.title).to.equal('Belajar Laravel untuk Pemula');\r",
									"                pm.expect(responseJson.data.course.duration).to.equal(\"11 hours\");\r",
									"                pm.expect(responseJson.data.course.thumbnail).to.be.a(\"string\");\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "_method",
									"value": "PUT",
									"type": "text"
								},
								{
									"key": "title",
									"value": "Belajar Laravel untuk Pemula",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Kursus untuk belajar membuat website menggunakan laravel untuk pemula",
									"type": "text"
								},
								{
									"key": "duration",
									"value": "11 hours",
									"type": "text"
								},
								{
									"key": "level",
									"value": "beginner",
									"type": "text"
								},
								{
									"key": "long_description",
									"value": "Laravel sering digunakan dalam dunia industri khususnya pengembangan website oleh karena itu mempelajari laravel merupakan salah satu investasi yang baik untuk diri sendiri.",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami controller",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami routes",
									"type": "text"
								},
								{
									"key": "topics[]",
									"value": "Memahami database",
									"type": "text"
								},
								{
									"key": "thumbnail",
									"type": "file",
									"src": "melt_chibi.jpg"
								}
							]
						},
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Delete Course with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail course', () => {\r",
									"    const courseId = pm.environment.get('courseId');\r",
									"    pm.sendRequest(`http://teachplex-backend.test/api/courses/${courseId}`, (error, response) => {\r",
									"        if (!error) {\r",
									"            pm.test('it should response with not found', () => {\r",
									"                pm.expect(response.code).to.equal(404);\r",
									"            });\r",
									"        }\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Lessons",
			"item": [
				{
					"name": "[No Test] Prerequisite",
					"item": [
						{
							"name": "Add User John",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { userId } } = pm.response.json();\r",
											"pm.environment.set(\"johnId\", userId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"john\",\r\n    \"password\": \"secret\",\r\n    \"email\": \"john@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/users",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with User John",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { accessToken } } = pm.response.json();\r",
											"pm.environment.set('accessTokenJohn', accessToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john@gmail.com\",\r\n    \"password\": \"secret\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/authentications",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"authentications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with User Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { accessToken } } = pm.response.json();\r",
											"pm.environment.set('accessTokenAdmin', accessToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@gmail.com\",\r\n    \"password\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/authentications",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"authentications"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Admin) Add Course with Valid Complete Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.environment.set(\"courseId\", responseJson.data.courseId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Belajar Laravel",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Kursus untuk belajar membuat website menggunakan laravel untuk pemula",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "12 hours",
											"type": "text"
										},
										{
											"key": "level",
											"value": "beginner",
											"type": "text"
										},
										{
											"key": "long_description",
											"value": "Laravel sering digunakan dalam dunia industri khususnya pengembangan website oleh karena itu mempelajari laravel merupakan salah satu investasi yang baik untuk diri sendiri.",
											"type": "text"
										},
										{
											"key": "topics[]",
											"value": "Memahami routes",
											"type": "text"
										},
										{
											"key": "topics[]",
											"value": "Memahami controller",
											"type": "text"
										},
										{
											"key": "topics[]",
											"value": "Memahami views",
											"type": "text"
										},
										{
											"key": "thumbnail",
											"type": "file",
											"src": "melt_chibi.jpg"
										}
									]
								},
								"url": {
									"raw": "{{weburl}}/api/courses",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"courses"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add Lesson without Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Introduction\",\r\n    \"content\": \"Di kursus ini kita akan belajar bagaimana cara membuat website dengan laravel\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Lesson without Admin Privileges",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Introduction\",\r\n    \"content\": \"Di kursus ini kita akan belajar bagaimana cara membuat website dengan laravel\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Add Lesson with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badLessonPayloads = pm.environment.get(\"badLessonPayloads\");\r",
									"\r",
									"    if(badLessonPayloads && badLessonPayloads.length > 0) {\r",
									"        pm.execution.setNextRequest(\"(Admin) Add Lesson with Invalid Payload\");\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badLessonPayloads = pm.environment.get('badLessonPayloads');\r",
									"\r",
									"if (!badLessonPayloads | badLessonPayloads.length === 0) {\r",
									"    badLessonPayloads = [\r",
									"        {},\r",
									"        { title: 1 },\r",
									"        { title: 'Belajar PHP' },\r",
									"        { title: 'Belajar PHP', content: true },\r",
									"    ];\r",
									"}\r",
									"\r",
									"const currentBadLessonPayload = badLessonPayloads.shift();\r",
									"console.log(currentBadLessonPayload);\r",
									"pm.environment.set('currentBadLessonPayload', JSON.stringify(currentBadLessonPayload));\r",
									"pm.environment.set('badLessonPayloads', badLessonPayloads);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadLessonPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Add Lesson with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.lessonId).to.be.a('string');\r",
									"    pm.environment.set(\"lessonId\", responseJson.data.lessonId);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Introduction\",\r\n    \"content\": \"Di kursus ini kita akan belajar bagaimana cara membuat website dengan laravel\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Add Lesson with Already Taken Title",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Introduction\",\r\n    \"content\": \"Di kursus ini kita akan belajar bagaimana cara membuat website dengan laravel\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Lesson From a Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.course).to.be.an(\"object\");\r",
									"    pm.expect(responseJson.data.course.lessons).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Get a Lesson with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons/{{lessonId}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"{{lessonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Get a Lesson with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    const lessonId = pm.environment.get(\"lessonId\");\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.lesson).to.be.an('object');\r",
									"    pm.expect(responseJson.data.lesson.id).to.equal(lessonId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons/{{lessonId}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"{{lessonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Edit Lesson with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Introduction to Laravel\",\r\n    \"content\": \"Di kursus ini kita akan belajar bagaimana cara membuat website dengan laravel. Hal pertama yang harus kita lakukan adalah download laragon\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons/xxx",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Edit Lesson with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"const repeatRequestUntilDatasetEmpty = () => {\r",
									"    const badLessonPayloads = pm.environment.get(\"badLessonPayloads\");\r",
									"\r",
									"    if(badLessonPayloads && badLessonPayloads.length > 0) {\r",
									"        pm.execution.setNextRequest(\"(Admin) Add Lesson with Invalid Payload\");\r",
									"    }\r",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let badLessonPayloads = pm.environment.get('badLessonPayloads');\r",
									"\r",
									"if (!badLessonPayloads | badLessonPayloads.length === 0) {\r",
									"    badLessonPayloads = [\r",
									"        {},\r",
									"        { title: 1 },\r",
									"        { title: 'Belajar PHP' },\r",
									"        { title: 'Belajar PHP', content: true },\r",
									"    ];\r",
									"}\r",
									"\r",
									"const currentBadLessonPayload = badLessonPayloads.shift();\r",
									"console.log(currentBadLessonPayload);\r",
									"pm.environment.set('currentBadLessonPayload', JSON.stringify(currentBadLessonPayload));\r",
									"pm.environment.set('badLessonPayloads', badLessonPayloads);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{currentBadLessonPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons/{{lessonId}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"{{lessonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Edit Lesson with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail lesson', () => {\r",
									"    const lessonId = pm.environment.get(\"lessonId\");\r",
									"    const courseId = pm.environment.get(\"courseId\");\r",
									"    const webUrl = pm.environment.get(\"weburl\");\r",
									"    const accessTokenAdmin = pm.environment.get(\"accessTokenAdmin\");\r",
									"    pm.sendRequest({\r",
									"        url: `${webUrl}/api/courses/${courseId}/lessons/${lessonId}`,\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            'Authorization': `Bearer ${accessTokenAdmin}`,\r",
									"            \"Accept\": \"application/json\"\r",
									"        }\r",
									"    }, (error, response) => {\r",
									"            if (!error) {\r",
									"            pm.test('it should response with revised content', () => {\r",
									"                pm.expect(response.code).to.equal(200);\r",
									"\r",
									"                const responseJson = response.json();\r",
									"\r",
									"                pm.expect(responseJson.status).to.equal('success');\r",
									"                pm.expect(responseJson.data.lesson).to.be.an('object');\r",
									"                pm.expect(responseJson.data.lesson.id).to.equal(lessonId);\r",
									"                pm.expect(responseJson.data.lesson.title).to.equal('Introduction to Laravel');\r",
									"                pm.expect(responseJson.data.lesson.content).to.equal('Di kursus ini kita akan belajar bagaimana cara membuat website dengan laravel. Hal pertama yang harus kita lakukan adalah download laragon');\r",
									"            });\r",
									"        }\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Introduction to Laravel\",\r\n    \"content\": \"Di kursus ini kita akan belajar bagaimana cara membuat website dengan laravel. Hal pertama yang harus kita lakukan adalah download laragon\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons/{{lessonId}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"{{lessonId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Delete Lesson with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons/xxx",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"xxx"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Delete Lesson with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test('when GET detail lesson', () => {\r",
									"    const lessonId = pm.environment.get(\"lessonId\");\r",
									"    const courseId = pm.environment.get(\"courseId\");\r",
									"    const webUrl = pm.environment.get(\"weburl\");\r",
									"    const accessTokenAdmin = pm.environment.get(\"accessTokenAdmin\");\r",
									"    pm.sendRequest({\r",
									"        url: `${webUrl}/api/courses/${courseId}/lessons/${lessonId}`,\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            'Authorization': `Bearer ${accessTokenAdmin}`,\r",
									"            \"Accept\": \"application/json\"\r",
									"        }\r",
									"    }, (error, response) => {\r",
									"            if (!error) {\r",
									"            pm.test('it should persist deletion', () => {\r",
									"                pm.expect(response.code).to.equal(404);\r",
									"\r",
									"                const responseJson = response.json();\r",
									"\r",
									"                pm.expect(responseJson.status).to.equal('fail');\r",
									"                pm.expect(responseJson.message).to.be.a('string');\r",
									"            });\r",
									"        }\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons/{{lessonId}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"{{lessonId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Progress (Course & Lesson)",
			"item": [
				{
					"name": "[No Test] Prerequisite",
					"item": [
						{
							"name": "Add User John",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { userId } } = pm.response.json();\r",
											"pm.environment.set(\"johnId\", userId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"john\",\r\n    \"password\": \"secret\",\r\n    \"email\": \"john@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/users",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with User John",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { accessToken } } = pm.response.json();\r",
											"pm.environment.set('accessTokenJohn', accessToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john@gmail.com\",\r\n    \"password\": \"secret\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/authentications",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"authentications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with User Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { accessToken } } = pm.response.json();\r",
											"pm.environment.set('accessTokenAdmin', accessToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@gmail.com\",\r\n    \"password\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/authentications",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"authentications"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Admin) Add Course with Valid Complete Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.environment.set(\"courseId\", responseJson.data.courseId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Belajar Laravel",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Kursus untuk belajar membuat website menggunakan laravel untuk pemula",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "12 hours",
											"type": "text"
										},
										{
											"key": "level",
											"value": "beginner",
											"type": "text"
										},
										{
											"key": "long_description",
											"value": "Laravel sering digunakan dalam dunia industri khususnya pengembangan website oleh karena itu mempelajari laravel merupakan salah satu investasi yang baik untuk diri sendiri.",
											"type": "text"
										},
										{
											"key": "topics[]",
											"value": "Memahami routes",
											"type": "text"
										},
										{
											"key": "topics[]",
											"value": "Memahami controller",
											"type": "text"
										},
										{
											"key": "topics[]",
											"value": "Memahami views",
											"type": "text"
										},
										{
											"key": "thumbnail",
											"type": "file",
											"src": "melt_chibi.jpg"
										}
									]
								},
								"url": {
									"raw": "{{weburl}}/api/courses",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Admin) Add Lesson with Valid Payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"    \r",
											"pm.environment.set(\"lessonId1\", responseJson.data.lessonId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Introduction\",\r\n    \"content\": \"Di kursus ini kita akan belajar bagaimana cara membuat website dengan laravel\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/courses/{{courseId}}/lessons",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"courses",
										"{{courseId}}",
										"lessons"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Admin) Add Lesson with Valid Payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"    \r",
											"pm.environment.set(\"lessonId2\", responseJson.data.lessonId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Core Modules\",\r\n    \"content\": \"Hal yang perlua diketahui sebelum belajar laravel adalah menginstall php, dan myqsl. Atau bisa menggunakan laragon yang sudah ada php, mysql, nginx, dll.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/courses/{{courseId}}/lessons",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"courses",
										"{{courseId}}",
										"lessons"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Finish Course when Lessons is not Completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/finish",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"finish"
							]
						}
					},
					"response": []
				},
				{
					"name": "Finish Lesson 2 Before Lesson 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons/{{lessonId2}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"{{lessonId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Finish Lesson 1 in Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data.lesson).to.be.an('object');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons/{{lessonId1}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"{{lessonId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Finish Lesson 2 in Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data.lesson).to.be.an('object');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons/{{lessonId2}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"{{lessonId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Finish Course when Lessons is Completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/finish",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"finish"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enrollments",
			"item": [
				{
					"name": "[No Test] Prerequisite",
					"item": [
						{
							"name": "Add User John",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { userId } } = pm.response.json();\r",
											"pm.environment.set(\"johnId\", userId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"john\",\r\n    \"password\": \"secret\",\r\n    \"email\": \"john@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/users",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add User Jane",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { userId } } = pm.response.json();\r",
											"pm.environment.set(\"janeId\", userId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"jane\",\r\n    \"password\": \"secret\",\r\n    \"email\": \"jane@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/users",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with User John",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { accessToken } } = pm.response.json();\r",
											"pm.environment.set('accessTokenJohn', accessToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john@gmail.com\",\r\n    \"password\": \"secret\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/authentications",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"authentications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with User Jane",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { accessToken } } = pm.response.json();\r",
											"pm.environment.set('accessTokenJane', accessToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"jane@gmail.com\",\r\n    \"password\": \"secret\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/authentications",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"authentications"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Add Enrollment without Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseId\": \"course-4567\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/enrollments",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"enrollments"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Add Enrollment with Invalid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseId\": 123\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/enrollments",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"enrollments"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Add Enrollment with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.enrollmentId).to.be.a('string');\r",
									"\r",
									"    pm.environment.set(\"enrollmentId\", responseJson.data.enrollmentId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseId\": \"{{courseId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/enrollments",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"enrollments"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Add Enrollment with Same Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseId\": \"{{courseId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/enrollments",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"enrollments"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Jane) Add Enrollment with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.enrollmentId).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJane}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseId\": \"{{courseId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/enrollments",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"enrollments"
							]
						}
					},
					"response": []
				},
				{
					"name": "(John) Get All Enrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.enrollments).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/enrollments",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"enrollments"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Get All User Enrollments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.enrollments).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/enrollments/all",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"enrollments",
								"all"
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Get All John Enrollments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.enrollments).to.be.an(\"array\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/enrollments/all?name=john",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"enrollments",
								"all"
							],
							"query": [
								{
									"key": "name",
									"value": "john"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(Admin) Delete John Enrollment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/enrollments/{{enrollmentId}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"enrollments",
								"{{enrollmentId}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Certificates",
			"item": [
				{
					"name": "[No Test] Prerequisite",
					"item": [
						{
							"name": "Add User John",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { userId } } = pm.response.json();\r",
											"pm.environment.set(\"johnId\", userId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"john\",\r\n    \"password\": \"secret\",\r\n    \"email\": \"john@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/users",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add User Jane",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { userId } } = pm.response.json();\r",
											"pm.environment.set(\"janeId\", userId)"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"jane\",\r\n    \"password\": \"secret\",\r\n    \"email\": \"jane@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/users",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with User John",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { accessToken } } = pm.response.json();\r",
											"pm.environment.set('accessTokenJohn', accessToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"john@gmail.com\",\r\n    \"password\": \"secret\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/authentications",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"authentications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with User Jane",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { accessToken } } = pm.response.json();\r",
											"pm.environment.set('accessTokenJane', accessToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"jane@gmail.com\",\r\n    \"password\": \"secret\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/authentications",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"authentications"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with User Admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const { data: { accessToken } } = pm.response.json();\r",
											"pm.environment.set('accessTokenAdmin', accessToken);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"admin@gmail.com\",\r\n    \"password\": \"admin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/authentications",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"authentications"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Admin) Add Course with Valid Complete Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"pm.environment.set(\"courseId\", responseJson.data.courseId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "title",
											"value": "Belajar Laravel",
											"type": "text"
										},
										{
											"key": "description",
											"value": "Kursus untuk belajar membuat website menggunakan laravel untuk pemula",
											"type": "text"
										},
										{
											"key": "duration",
											"value": "12 hours",
											"type": "text"
										},
										{
											"key": "level",
											"value": "beginner",
											"type": "text"
										},
										{
											"key": "long_description",
											"value": "Laravel sering digunakan dalam dunia industri khususnya pengembangan website oleh karena itu mempelajari laravel merupakan salah satu investasi yang baik untuk diri sendiri.",
											"type": "text"
										},
										{
											"key": "topics[]",
											"value": "Memahami routes",
											"type": "text"
										},
										{
											"key": "topics[]",
											"value": "Memahami controller",
											"type": "text"
										},
										{
											"key": "topics[]",
											"value": "Memahami views",
											"type": "text"
										},
										{
											"key": "thumbnail",
											"type": "file",
											"src": "melt_chibi.jpg"
										}
									]
								},
								"url": {
									"raw": "{{weburl}}/api/courses",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"courses"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Admin) Add Lesson with Valid Payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"    \r",
											"pm.environment.set(\"lessonId1\", responseJson.data.lessonId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Introduction\",\r\n    \"content\": \"Di kursus ini kita akan belajar bagaimana cara membuat website dengan laravel\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/courses/{{courseId}}/lessons",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"courses",
										"{{courseId}}",
										"lessons"
									]
								}
							},
							"response": []
						},
						{
							"name": "(Admin) Add Lesson with Valid Payload",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseJson = pm.response.json();\r",
											"    \r",
											"pm.environment.set(\"lessonId2\", responseJson.data.lessonId);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenAdmin}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Core Modules\",\r\n    \"content\": \"Hal yang perlua diketahui sebelum belajar laravel adalah menginstall php, dan myqsl. Atau bisa menggunakan laragon yang sudah ada php, mysql, nginx, dll.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/courses/{{courseId}}/lessons",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"courses",
										"{{courseId}}",
										"lessons"
									]
								}
							},
							"response": []
						},
						{
							"name": "(John) Add Enrollment",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessTokenJohn}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"courseId\": \"{{courseId}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{weburl}}/api/enrollments",
									"host": [
										"{{weburl}}"
									],
									"path": [
										"api",
										"enrollments"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Generate Certificate without Authentication",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 401 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseId\": \"course-4567\",\r\n    \"courseName\": \"Belajar PHP\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/certificates",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Certificate with Invalid Payload",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseId\": 123\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/certificates",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Certificate with not Completed Course",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 403 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(403);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseId\": \"{{courseId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/certificates",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "[No Test] (John) Finish Lesson 1 in Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons/{{lessonId1}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"{{lessonId1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[No Test] (John) Finish Lesson 2 in Course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/lessons/{{lessonId2}}",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"lessons",
								"{{lessonId2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "[No Test] (John) Finish Course when Lessons is Completed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/courses/{{courseId}}/finish",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"courses",
								"{{courseId}}",
								"finish"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Certificate with Valid Payload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.certificate).to.be.an('object');\r",
									"    pm.expect(responseJson.data.certificate.id).to.be.a(\"string\");\r",
									"\r",
									"    pm.environment.set(\"certificateId\", responseJson.data.certificate.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseId\": \"{{courseId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/certificates",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Certificate with Same Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 400 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenJohn}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"courseId\": \"{{courseId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{weburl}}/api/certificates",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Upload Certificate Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 201 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.filename).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessTokenAdmin}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "template",
									"type": "file",
									"src": "rm218-bb-07.jpg"
								}
							]
						},
						"url": {
							"raw": "{{weburl}}/api/certificates/templates/upload",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"certificates",
								"templates",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Certificate with Invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 404 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(404);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('fail');\r",
									"    pm.expect(responseJson.message).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/certificates/xxx/verify",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"certificates",
								"xxx",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Certificate with Valid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.certificate).to.be.an('object');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/certificates/{{certificateId}}/verify",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"certificates",
								"{{certificateId}}",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Certificates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.certificates).to.be.an(\"array\");\r",
									"    pm.expect(responseJson.data.certificates).to.length.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/certificates",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"certificates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All John Certificates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('it should response 200 status code', () => {\r",
									"    pm.expect(pm.response).to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test('response Content-Type header should have application/json value', () => {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.includes('application/json');\r",
									"}); \r",
									"\r",
									"pm.test('response body should an object', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test('response body have correct property and value', () => {\r",
									"    const responseJson = pm.response.json();\r",
									"\r",
									"    pm.expect(responseJson.status).to.equal('success');\r",
									"    pm.expect(responseJson.data).to.be.an('object');\r",
									"    pm.expect(responseJson.data.certificates).to.be.an(\"array\");\r",
									"    pm.expect(responseJson.data.certificates).to.length.least(1);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{weburl}}/api/certificates?name=john&email=john@gmail.com",
							"host": [
								"{{weburl}}"
							],
							"path": [
								"api",
								"certificates"
							],
							"query": [
								{
									"key": "name",
									"value": "john"
								},
								{
									"key": "email",
									"value": "john@gmail.com"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "End of Test",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{weburl}}/api/tests",
					"host": [
						"{{weburl}}"
					],
					"path": [
						"api",
						"tests"
					]
				}
			},
			"response": []
		}
	]
}